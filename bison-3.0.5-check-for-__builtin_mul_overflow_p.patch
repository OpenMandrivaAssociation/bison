diff -up bison-3.1/configure.ac.3~ bison-3.1/configure.ac
--- bison-3.1/configure.ac.3~	2018-08-25 10:55:03.000000000 +0200
+++ bison-3.1/configure.ac	2018-08-28 03:06:13.218991176 +0200
@@ -56,6 +56,18 @@ AC_PROG_CXX
 # Gnulib (early checks).
 gl_EARLY
 
+AC_CACHE_CHECK([for gcc 7-compatible __builtin_mul_overflow_p],
+  [utils_cv_builtin_mul_overflow_p],
+  [AC_COMPILE_IFELSE(
+    [AC_LANG_PROGRAM(
+      [[]],
+      [[return __builtin_mul_overflow_p(1, 2, 3);]])],
+    [utils_cv_builtin_mul_overflow_p=yes],
+    [utils_cv_builtin_mul_overflow_p=no])])
+if test $utils_cv_builtin_mul_overflow_p = yes; then
+  AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW_P], [1], [Define if your compiler supports __builtin_mul_overflow_p])
+fi
+
 # Gnulib uses '#pragma GCC diagnostic push' to silence some
 # warnings, but older gcc doesn't support this.
 AC_CACHE_CHECK([whether pragma GCC diagnostic push works],
diff -up bison-3.1/lib/intprops.h.3~ bison-3.1/lib/intprops.h
--- bison-3.1/lib/intprops.h.3~	2018-05-08 12:04:17.000000000 +0200
+++ bison-3.1/lib/intprops.h	2018-08-28 03:06:13.219991179 +0200
@@ -225,14 +225,11 @@
 # define _GL_HAS_BUILTIN_OVERFLOW 0
 #endif
 
-/* True if __builtin_add_overflow_p (A, B, C) works.  */
-#define _GL_HAS_BUILTIN_OVERFLOW_P (7 <= __GNUC__)
-
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
    (e.g., A and B) have the same type as MIN and MAX.  Instead, they assume
    that the result (e.g., A + B) has that type.  */
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define _GL_ADD_OVERFLOW(a, b, min, max)                               \
    __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)
 # define _GL_SUBTRACT_OVERFLOW(a, b, min, max)                          \
@@ -318,7 +315,7 @@
   _GL_BINARY_OP_OVERFLOW (a, b, _GL_ADD_OVERFLOW)
 #define INT_SUBTRACT_OVERFLOW(a, b) \
   _GL_BINARY_OP_OVERFLOW (a, b, _GL_SUBTRACT_OVERFLOW)
-#if _GL_HAS_BUILTIN_OVERFLOW_P
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define INT_NEGATE_OVERFLOW(a) INT_SUBTRACT_OVERFLOW (0, a)
 #else
 # define INT_NEGATE_OVERFLOW(a) \
diff -up bison-3.1/lib/mbrtowc.c.3~ bison-3.1/lib/mbrtowc.c
--- bison-3.1/lib/mbrtowc.c.3~	2018-08-28 03:06:13.219991179 +0200
+++ bison-3.1/lib/mbrtowc.c	2018-08-28 03:06:38.130079217 +0200
@@ -36,7 +36,7 @@
 # include "verify.h"
 
 # ifndef FALLTHROUGH
-#  if __GNUC__ < 7
+#  if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #   define FALLTHROUGH ((void) 0)
 #  else
 #   define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up bison-3.1/lib/quotearg.c.3~ bison-3.1/lib/quotearg.c
--- bison-3.1/lib/quotearg.c.3~	2018-05-08 12:02:49.000000000 +0200
+++ bison-3.1/lib/quotearg.c	2018-08-28 03:06:13.219991179 +0200
@@ -55,7 +55,7 @@
 #define INT_BITS (sizeof (int) * CHAR_BIT)
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up bison-3.1/lib/vasnprintf.c.3~ bison-3.1/lib/vasnprintf.c
--- bison-3.1/lib/vasnprintf.c.3~	2018-05-08 12:04:20.000000000 +0200
+++ bison-3.1/lib/vasnprintf.c	2018-08-28 03:06:13.220991183 +0200
@@ -119,7 +119,7 @@
 #endif
 
 #ifndef FALLTHROUGH
-# if __GNUC__ < 7
+# if __GNUC__ < 7 || !__has_attribute(__fallthrough__)
 #  define FALLTHROUGH ((void) 0)
 # else
 #  define FALLTHROUGH __attribute__ ((__fallthrough__))
diff -up bison-3.1/lib/xalloc-oversized.h.3~ bison-3.1/lib/xalloc-oversized.h
--- bison-3.1/lib/xalloc-oversized.h.3~	2018-05-08 12:02:49.000000000 +0200
+++ bison-3.1/lib/xalloc-oversized.h	2018-08-28 03:06:13.220991183 +0200
@@ -41,7 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__
+#ifdef HAVE_BUILTIN_MUL_OVERFLOW_P
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif 5 <= __GNUC__ && !defined __ICC && !__STRICT_ANSI__
